# This pipeline has two stages: build and deploy

#1 TRIGGERS / exclusins
trigger:
- azure-pipelines-test-stages

# POOLS
stages:
- stage: Test
  displayName: 'Test stage 0'
  jobs:
    - job: BuildLinux
      displayName: Build on Linux
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: echo Hello, world!
        displayName: 'Run a one-line script'
      - script: |
          echo Add other tasks to build, test, and deploy your project.
          echo See https://aka.ms/yaml
        displayName: 'Run a multi-line script'
# STAGE 1 - BUILD ON LINUX
- stage: BuildLinux
  jobs:
  - job: BuildApp
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET 5 SDK'
      inputs:
        packageType: 'sdk'
        version: '5.x'
    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release --no-restore'
        
    - task: DotNetCoreCLI@2
      displayName: 'Run tests with code coverage'
      inputs:
        command: 'test'
        projects: '**/*tests.csproj'
        arguments: '--configuration $(buildConfiguration) --logger trx --collect "Code coverage"'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/coveragehtml'
    - task: DotNetCoreCLI@2
      displayName: 'Publish project'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

# # STAGE 2 - BUILD ON WIN

# This pipeline will install the .NET 6 SDK, run unit tests with code coverage, and publish the code coverage results
# - stage: BuildWin
#   pool:
#     vmImage: 'windows-latest'
#   jobs:
#   - job: BuildApp
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     - task: UseDotNet@2
#       displayName: 'Install .NET 6 SDK'
#       inputs:
#         packageType: 'sdk'
#         version: '6.0.x'
#     - task: DotNetCoreCLI@2
#       displayName: 'Restore dependencies'
#       inputs:
#         command: 'restore'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       displayName: 'Build project'
#       inputs:
#         command: 'build'
#         projects: '**/*.csproj'
#         arguments: '--configuration Release --no-restore'
    # DOESNT WORK:
    # - task: DotNetCoreCLI@2
    #   displayName: 'Run unit tests with code coverage'
    #   inputs:
    #     command: 'test'
    #     projects: '**/*Tests.csproj'
    #     arguments: '--configuration Release --no-build --collect:"XPlat Code Coverage"'

    # - script: 'dotnet tool install -g dotnet-reportgenerator-globaltool'
    #   displayName: 'Install report generator tool'

    # - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:"Cobertura"'
    #   displayName: 'Generate code coverage report'

    # - task: PublishCodeCoverageResults@1
    #   displayName: 'Publish code coverage results'
    #   inputs:
    #     codeCoverageTool: 'Cobertura'
    #     summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'

# STAGE 2 - DEPLOY
# - stage: Deploy
#   jobs:
#   - deployment: DeployApp
#     environment: 'Dev'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             displayName: 'Deploy to Azure Web App'
#             inputs:
#               azureSubscription: '<Azure service connection>'
#               appType: 'webAppLinux'
#               WebAppName: '<Name of your web app>'
#               packageForLinux: '$(Pipeline.Workspace)/drop/**/*.zip'
